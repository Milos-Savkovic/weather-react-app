{"version":3,"sources":["components/UserForm/User.js","components/CityCardContainer/CityCard/CityCard.js","components/CityCardContainer/CityCardContainer.js","components/Spinner/Spinner.js","containers/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Search","Input","UserForm","_ref","getWeather","searchValue","handleSearchInput","react_default","a","createElement","placeholder","value","onChange","type","name","style","width","es_button","onClick","className","cityCard","id","temp","humidity","pressure","maxTemp","minTemp","cityName","removeCityHandler","card","title","CardContainer","showCard","weatherData","map","weatherCity","CityCard_CityCard","key","weather","spinner","props","URL","apiKey","App","state","loading","event","_this","setState","target","axios","delete","concat","then","response","status","getCity","e","preventDefault","_assertThisInitialize","Object","assertThisInitialized","get","_response$data$main","data","main","temp_max","temp_min","cityStatus","Math","round","cityHumidity","cityPressure","post","res","catch","error","console","log","Error","statusText","_response$data","keys","reverse","this","_this$state","Spinner_Spinner","UserForm_User","CityCardContainer_CityCardContainer","Component","Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b70101f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Input, Button } from 'antd';\r\nimport './User.css';\r\n\r\nconst Search = Input.Search;\r\n\r\nconst UserForm = ({ getWeather, searchValue, handleSearchInput }) => {\r\n  return (\r\n    <div>\r\n      <Search\r\n        placeholder=\"Search for a city\"\r\n        value={searchValue}\r\n        onChange={handleSearchInput}\r\n        type=\"text\"\r\n        name=\"weatherValue\"\r\n        style={{ width: 200 }}\r\n      />\r\n      <br />\r\n      <Button onClick={getWeather} className=\"main\">\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","import React from 'react';\r\n\r\nimport './CityCard.css';\r\nimport { Card } from 'antd';\r\n\r\nconst cityCard = ({\r\n  id,\r\n  temp,\r\n  humidity,\r\n  pressure,\r\n  maxTemp,\r\n  minTemp,\r\n  cityName,\r\n  removeCityHandler\r\n}) => (\r\n  <div className=\"card-wrapper\">\r\n    <Card title={cityName} className=\"card\">\r\n      <p>Temp: {temp}</p>\r\n      <p>Humidity: {humidity}</p>\r\n      <p>Pressure: {pressure}</p>\r\n      <p>MaxTemp: {maxTemp}</p>\r\n      <p>MinTemp: {minTemp}</p>\r\n    </Card>\r\n    <span className=\"close\" onClick={() => removeCityHandler(id)}>\r\n      x\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default cityCard;\r\n","import React from 'react';\r\n\r\nimport './CityCardContainer.css';\r\nimport CityCard from './CityCard/CityCard';\r\n\r\nconst CardContainer = ({ showCard, weatherData, removeCityHandler }) => (\r\n  <div className=\"container\">\r\n    {weatherData.map(weatherCity => {\r\n      return (\r\n        <CityCard\r\n          key={weatherCity.id}\r\n          id={weatherCity.id}\r\n          temp={weatherCity.weather}\r\n          humidity={weatherCity.humidity}\r\n          pressure={weatherCity.pressure}\r\n          maxTemp={weatherCity.maxTemp}\r\n          minTemp={weatherCity.minTemp}\r\n          cityName={weatherCity.cityName}\r\n          removeCityHandler={removeCityHandler}\r\n        />\r\n      );\r\n    })}\r\n  </div>\r\n);\r\n\r\nexport default CardContainer;\r\n","import React from 'react';\r\n\r\nimport './Spinner.css'\r\n\r\nconst spinner = props => {\r\n  return (\r\n    <div className=\"loader\">Loading ...</div>\r\n  )\r\n}\r\n\r\nexport default spinner;","import React, { Component } from 'react';\r\n\r\nimport '../App.css';\r\nimport UserForm from '../components/UserForm/User';\r\nimport axios from 'axios';\r\nimport CardContainer from '../components/CityCardContainer/CityCardContainer';\r\nimport Spinner from '../components/Spinner/Spinner';\r\n\r\nconst URL = 'http://api.openweathermap.org/data/2.5/weather?q=';\r\nconst apiKey = '&appid=9c032a32e98184017aa37fbf6e37538a';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    showCard: false,\r\n    weatherData: [],\r\n    loading: false,\r\n    searchValue: ''\r\n  };\r\n\r\n  componentWillMount() {\r\n    this.getCity();\r\n  }\r\n  render() {\r\n    const {\r\n      state: { showCard, weatherData, loading, searchValue },\r\n      getWeather,\r\n      handleSearchInput\r\n    } = this;\r\n\r\n    if (loading) {\r\n      return <Spinner />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"main-wrapper\">\r\n        <UserForm\r\n          getWeather={getWeather}\r\n          handleSearchInput={handleSearchInput}\r\n          searchValue={searchValue}\r\n        />\r\n        <CardContainer\r\n          weatherData={weatherData}\r\n          showCard={showCard}\r\n          removeCityHandler={this.removeCityHandler}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleSearchInput = event => {\r\n    this.setState({ searchValue: event.target.value });\r\n  };\r\n\r\n  removeCityHandler = id => {\r\n    this.setState({ loading: true });\r\n    axios\r\n      .delete(`https://weather-app-add29.firebaseio.com/cities/${id}.json`)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          return this.getCity();\r\n        }\r\n        this.setState({ loading: false });\r\n      });\r\n  };\r\n\r\n  getWeather = e => {\r\n    e.preventDefault();\r\n    const {\r\n      state: { searchValue: weatherCity },\r\n      getCity\r\n    } = this;\r\n\r\n    if (weatherCity) {\r\n      axios\r\n        .get(URL + weatherCity + apiKey)\r\n        .then(response => {\r\n          const {\r\n            data: {\r\n              main: { temp, humidity, pressure, temp_max, temp_min }\r\n            }\r\n          } = response;\r\n          const weather = Math.round(temp - 273.15);\r\n          const cityHumidity = Math.round(humidity);\r\n          const cityPressure = Math.round(pressure);\r\n          const maxTemp = Math.round(temp_max - 273.15);\r\n          const minTemp = Math.round(temp_min - 273.15);\r\n          const cityName = response.data.name;\r\n          const cityStatus = {\r\n            weather,\r\n            cityHumidity,\r\n            cityPressure,\r\n            maxTemp,\r\n            minTemp,\r\n            cityName\r\n          };\r\n\r\n          this.setState({ showCard: true });\r\n\r\n          axios\r\n            .post('https://weather-app-add29.firebaseio.com/cities.json', {\r\n              cityStatus\r\n            })\r\n            .then(res => {\r\n              if (res.status === 200) getCity();\r\n            })\r\n            .catch(error => {\r\n              console.log('ERROR', error);\r\n            });\r\n        })\r\n        .catch(error => {\r\n          this.setState({ error });\r\n        });\r\n    } else return;\r\n  };\r\n\r\n  getCity = () => {\r\n    this.setState({ loading: true });\r\n    axios\r\n      .get(\r\n        `${'https://cors-anywhere.herokuapp.com/'}https://weather-app-add29.firebaseio.com/cities.json`\r\n      )\r\n      .then(response => {\r\n        if (response.status !== 200) {\r\n          throw Error(response.statusText);\r\n        }\r\n        return response;\r\n      })\r\n      .then(response => {\r\n        const { data = null } = response;\r\n        if (data) {\r\n          const weatherData = Object.keys(data).map(key => {\r\n            return {\r\n              id: key,\r\n              weather: data[key].cityStatus.weather,\r\n              humidity: data[key].cityStatus.cityHumidity,\r\n              pressure: data[key].cityStatus.cityPressure,\r\n              maxTemp: data[key].cityStatus.maxTemp,\r\n              minTemp: data[key].cityStatus.minTemp,\r\n              cityName: data[key].cityStatus.cityName\r\n            };\r\n          });\r\n          this.setState({ weatherData: weatherData.reverse(), loading: false });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log('error', error);\r\n      });\r\n  };\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\n\r\nimport Weather from './containers/Weather';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-title\">Weather forecast</h1>\r\n          <Weather />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}